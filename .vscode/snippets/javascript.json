{
  "STRT React Native Component": {
    "prefix": "strt_rn_component",
    "body": [
      "import React, { Component } from 'react';",
      "import { View, Text } from 'react-native';",
      "",
      "class ${1:Name} extends Component {",
      "  render() {",
      "    return (",
      "      <View>",
      "        <Text>${1:Name}</Text>",
      "      </View>",
      "    );",
      "  }",
      "}",
      "",
      "export default ${1:Name};"
    ],
    "description": "React Native Component"
  },
  "STRT React Native HOC": {
    "prefix": "strt_rn_hoc",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "import { connect } from 'react-redux';",
      "import { createStructuredSelector } from 'reselect';",
      "import { compose } from 'redux';",
      "import {",
      "  fetch${1:Uppercase},",
      "} from '../actions/${2:lowercase}';",
      "import {",
      "  select${1:Uppercase},",
      "} from '../selectors/${2:lowercase}';",
      "import ${1:Uppercase} from '../components/${1:Uppercase}';",
      "",
      "const Component = (props) => <${1:Uppercase} {...props} />",
      "",
      "Component.propTypes = {",
      "  fetchAuth: PropTypes.func,",
      "};",
      "",
      "const mapStateToProps = createStructuredSelector({",
      "  auth: select${1:Uppercase}(),",
      "});",
      "",
      "function mapDispatchToProps(dispatch) {",
      "  return {",
      "    fetch${1:Uppercase}: () => dispatch(fetch${1:Uppercase}()),",
      "  };",
      "}",
      "",
      "const withConnect = connect(mapStateToProps, mapDispatchToProps);",
      "",
      "export default compose(",
      "  withConnect,",
      ")(Component);",
      ""
    ],
    "description": "STRT React Native HOC"
  },
  "STRT Constant": {
    "prefix": "strt_const",
    "body": [
      "export const ${1:name} = 'app/${2:domain}/${1:name}';",
      "export const ${1:name}_SUCCESS = 'app/${2:domain}/${1:name}_SUCCESS';",
      "export const ${1:name}_FAILURE = 'app/${2:domain}/${1:name}_FAILURE';",
      "export const RESET_${1:name} = 'app/${2:domain}/RESET_${1:name}';"
    ],
    "description": "STRT Constant"
  },
  "STRT Action": {
    "prefix": "strt_action",
    "body": [
      "import {",
      "  ${2:const},",
      "  ${2:const}_SUCCESS,",
      "  ${2:const}_FAILURE,",
      "} from './constants';",
      "",
      "export function ${1:action}() {",
      "  return {",
      "    type: ${2:const},",
      "  };",
      "}",
      "export function ${1:action}Success(${3:success}) {",
      "  return {",
      "    type: ${2:const}_SUCCESS,",
      "    ${3:success},",
      "  };",
      "}",
      "export function ${1:action}Failure(error) {",
      "  return {",
      "    type: ${2:const}_FAILURE,",
      "    error,",
      "  };",
      "}",
      ""
    ],
    "description": "Generates a single action"
  },
  "STRT Actions": {
    "prefix": "strt_actions",
    "body": [
      "import {",
      "  FETCH_${1:ALLCAPS_SNAKE},",
      "  FETCH_${1:ALLCAPS_SNAKE}_SUCCESS,",
      "  FETCH_${1:ALLCAPS_SNAKE}_FAILURE,",
      "  FETCH_${1:ALLCAPS_SNAKE}S,",
      "  FETCH_${1:ALLCAPS_SNAKE}S_SUCCESS,",
      "  FETCH_${1:ALLCAPS_SNAKE}S_FAILURE,",
      "  CREATE_${1:ALLCAPS_SNAKE},",
      "  CREATE_${1:ALLCAPS_SNAKE}_SUCCESS,",
      "  CREATE_${1:ALLCAPS_SNAKE}_FAILURE,",
      "  UPDATE_${1:ALLCAPS_SNAKE},",
      "  UPDATE_${1:ALLCAPS_SNAKE}_SUCCESS,",
      "  UPDATE_${1:ALLCAPS_SNAKE}_FAILURE,",
      "  DELETE_${1:ALLCAPS_SNAKE},",
      "  DELETE_${1:ALLCAPS_SNAKE}_SUCCESS,",
      "  DELETE_${1:ALLCAPS_SNAKE}_FAILURE,",
      "} from './constants';",
      "",
      "export function fetch${2:PascalCase}(${3:lowercase}Id) {",
      "  return {",
      "    type: FETCH_${1:ALLCAPS_SNAKE},",
      "    ${3:lowercase}Id,",
      "  };",
      "}",
      "export function fetch${2:PascalCase}Success(${3:lowercase}) {",
      "  return {",
      "    type: FETCH_${1:ALLCAPS_SNAKE}_SUCCESS,",
      "    ${3:lowercase},",
      "  };",
      "}",
      "export function fetch${2:PascalCase}Failure(error) {",
      "  return {",
      "    type: FETCH_${1:ALLCAPS_SNAKE}_FAILURE,",
      "    error,",
      "  };",
      "}",
      "export function fetch${2:PascalCase}s(options) {",
      "  return {",
      "    type: FETCH_${1:ALLCAPS_SNAKE}S,",
      "    options",
      "  };",
      "}",
      "export function fetch${2:PascalCase}sSuccess(${3:lowercase}s) {",
      "  return {",
      "    type: FETCH_${1:ALLCAPS_SNAKE}S_SUCCESS,",
      "    ${3:lowercase}s,",
      "  };",
      "}",
      "export function fetch${2:PascalCase}sFailure(error) {",
      "  return {",
      "    type: FETCH_${1:ALLCAPS_SNAKE}S_FAILURE,",
      "    error,",
      "  };",
      "}",
      "export function create${2:PascalCase}(${3:lowercase}) {",
      "  return {",
      "    type: CREATE_${1:ALLCAPS_SNAKE},",
      "    ${3:lowercase},",
      "  };",
      "}",
      "export function create${2:PascalCase}Success(${3:lowercase}) {",
      "  return {",
      "    type: CREATE_${1:ALLCAPS_SNAKE}_SUCCESS,",
      "    ${3:lowercase},",
      "  };",
      "}",
      "export function create${2:PascalCase}Failure(error) {",
      "  return {",
      "    type: CREATE_${1:ALLCAPS_SNAKE}_FAILURE,",
      "    error,",
      "  };",
      "}",
      "export function update${2:PascalCase}(${3:lowercase}) {",
      "  return {",
      "    type: UPDATE_${1:ALLCAPS_SNAKE},",
      "    ${3:lowercase},",
      "  };",
      "}",
      "export function update${2:PascalCase}Success(${3:lowercase}) {",
      "  return {",
      "    type: UPDATE_${1:ALLCAPS_SNAKE}_SUCCESS,",
      "    ${3:lowercase},",
      "  };",
      "}",
      "export function update${2:PascalCase}Failure(error) {",
      "  return {",
      "    type: UPDATE_${1:ALLCAPS_SNAKE}_FAILURE,",
      "    error,",
      "  };",
      "}",
      "export function delete${2:PascalCase}(${3:lowercase}Id) {",
      "  return {",
      "    type: DELETE_${1:ALLCAPS_SNAKE},",
      "    ${3:lowercase}Id,",
      "  };",
      "}",
      "export function delete${2:PascalCase}Success(${3:lowercase}) {",
      "  return {",
      "    type: DELETE_${1:ALLCAPS_SNAKE}_SUCCESS,",
      "    ${3:lowercase},",
      "  };",
      "}",
      "export function delete${2:PascalCase}Failure(error) {",
      "  return {",
      "    type: DELETE_${1:ALLCAPS_SNAKE}_FAILURE,",
      "    error,",
      "  };",
      "}"
    ],
    "description": "Generates all the actions for CRUD"
  },
  "STRT Saga": {
    "prefix": "strt_saga",
    "body": [
      "import { call, put, takeLatest } from 'redux-saga/effects';",
      "import {",
      "  ${1:const},",
      "} from './constants';",
      "import { ${2:action} as ${2:action}Api } from '../../api/orders/api';",
      "import {",
      "  ${2:action}Success,",
      "  ${2:action}Failure,",
      "} from './actions';",
      "",
      "export function* ${2:action}Saga() {",
      "  yield takeLatest(${1:const}, perform${3:perform});",
      "}",
      "",
      "function* perform${3:perform}(action) {",
      "  try {",
      "    const response = yield call(${2:action}Api, action.cartId);",
      "    if (response) {",
      "      yield put(${2:action}Success(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(${2:action}Failure(e));",
      "  }",
      "}",
      ""
    ],
    "description": "STRT Saga"
  },
  "Generates STRT component": {
    "prefix": "strt_comp",
    "body": [
      "import React, { Component } from 'react';",
      "import PropTypes from 'prop-types';",
      "import {",
      "  withStyles,",
      "} from '@material-ui/core';",
      "",
      "const styles = () => ({",
      "});",
      "",
      "class ${1:component} extends Component { // eslint-disable-line react/prefer-stateless-function",
      "  render() {",
      "    const { classes } = this.props;",
      "    return (",
      "      <div></div>",
      "    );",
      "  }",
      "}",
      "${1:component}.defaultProps = {",
      "",
      "};",
      "${1:component}.propTypes = {",
      "  classes: PropTypes.object,",
      "};",
      "",
      "export default withStyles(styles)(${1:component});",
      ""
    ],
    "description": "Generates component"
  },
  "Generates Container": {
    "prefix": "strt_container",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "import { connect } from 'react-redux';",
      "import { createStructuredSelector } from 'reselect';",
      "import { compose } from 'redux';",
      "",
      "import injectSaga from 'utils/injectSaga';",
      "import injectReducer from 'utils/injectReducer';",
      "import { select${3:fetch} } from './selectors';",
      "import reducer from './reducer';",
      "import saga from './saga';",
      "",
      "export class ${1:name} extends React.Component { // eslint-disable-line react/prefer-stateless-function",
      "  render() {",
      "    return (",
      "      <div>",
      "      </div>",
      "    );",
      "  }",
      "}",
      "",
      "${1:name}.propTypes = {",
      "  fetch${3:fetch}: PropTypes.func,",
      "};",
      "",
      "const mapStateToProps = createStructuredSelector({",
      "  ${2:key}: select${3:fetch}(),",
      "});",
      "",
      "function mapDispatchToProps(dispatch) {",
      "  return {",
      "    fetch${3:fetch}: () => dispatch(fetch${3:fetch}()),",
      "  };",
      "}",
      "",
      "const withConnect = connect(mapStateToProps, mapDispatchToProps);",
      "",
      "const withReducer = injectReducer({ key: '${2:key}', reducer });",
      "const withSaga = injectSaga({ key: '${2:key}', saga });",
      "",
      "export default compose(",
      "  withReducer,",
      "  withSaga,",
      "  withConnect,",
      ")(${1:name});",
      ""
    ],
    "description": "Generates Container"
  },
  "Generates Sagas for Crud ": {
    "prefix": "strt_saga_crud",
    "body": [
      "import { call, put, takeLatest } from 'redux-saga/effects';",
      "import {",
      "  FETCH_${1:ALLCAPS_SNAKE}S,",
      "  FETCH_${1:ALLCAPS_SNAKE},",
      "  CREATE_${1:ALLCAPS_SNAKE},",
      "  UPDATE_${1:ALLCAPS_SNAKE},",
      "  DELETE_${1:ALLCAPS_SNAKE},",
      "} from '../constants/${3:lowercase}s';",
      "import {",
      "  fetch${2:PascalCase}sSuccess,",
      "  fetch${2:PascalCase}sFailure,",
      "  fetch${2:PascalCase}Success,",
      "  fetch${2:PascalCase}Failure,",
      "  create${2:PascalCase}Success,",
      "  create${2:PascalCase}Failure,",
      "  update${2:PascalCase}Success,",
      "  update${2:PascalCase}Failure,",
      "  delete${2:PascalCase}Success,",
      "  delete${2:PascalCase}Failure,",
      "} from '../actions/${3:lowercase}s';",
      "import {",
      "  fetch${2:PascalCase}s as fetch${2:PascalCase}sApi,",
      "  fetch${2:PascalCase} as fetch${2:PascalCase}Api,",
      "  create${2:PascalCase} as create${2:PascalCase}Api,",
      "  update${2:PascalCase} as update${2:PascalCase}Api,",
      "  delete${2:PascalCase} as delete${2:PascalCase}Api,",
      "} from '../apis/${3:lowercase}s';",
      "",
      "export function* fetch${2:PascalCase}sSaga() {",
      "  yield takeLatest(FETCH_${1:ALLCAPS_SNAKE}S, performFetch${2:PascalCase}sAction);",
      "}",
      "",
      "function* performFetch${2:PascalCase}sAction(action) {",
      "  try {",
      "    const response = yield call(fetch${2:PascalCase}sApi, action.options);",
      "    if (response) {",
      "      yield put(fetch${2:PascalCase}sSuccess(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(fetch${2:PascalCase}sFailure(e));",
      "  }",
      "}",
      "export function* fetch${2:PascalCase}Saga() {",
      "  yield takeLatest(FETCH_${1:ALLCAPS_SNAKE}, performFetch${2:PascalCase}Action);",
      "}",
      "function* performFetch${2:PascalCase}Action(action) {",
      "  try {",
      "    const response = yield call(fetch${2:PascalCase}Api, action.${3:lowercase}Id);",
      "    if (response) {",
      "      yield put(fetch${2:PascalCase}Success(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(fetch${2:PascalCase}Failure(e));",
      "  }",
      "}",
      "export function* create${2:PascalCase}Saga() {",
      "  yield takeLatest(CREATE_${1:ALLCAPS_SNAKE}, performCreate${2:PascalCase}Action);",
      "}",
      "function* performCreate${2:PascalCase}Action(action) {",
      "  try {",
      "    const response = yield call(create${2:PascalCase}Api, action.${3:lowercase});",
      "    if (response) {",
      "      yield put(create${2:PascalCase}Success(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(create${2:PascalCase}Failure(e));",
      "  }",
      "}",
      "export function* update${2:PascalCase}Saga() {",
      "  yield takeLatest(UPDATE_${1:ALLCAPS_SNAKE}, performUpdate${2:PascalCase}Action);",
      "}",
      "function* performUpdate${2:PascalCase}Action(action) {",
      "  try {",
      "    const response = yield call(update${2:PascalCase}Api, action.${3:lowercase});",
      "    if (response) {",
      "      yield put(update${2:PascalCase}Success(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(update${2:PascalCase}Failure(e));",
      "  }",
      "}",
      "export function* delete${2:PascalCase}Saga() {",
      "  yield takeLatest(DELETE_${1:ALLCAPS_SNAKE}, performDelete${2:PascalCase}Action);",
      "}",
      "function* performDelete${2:PascalCase}Action(action) {",
      "  try {",
      "    const response = yield call(delete${2:PascalCase}Api, action.${3:lowercase}Id);",
      "    if (response) {",
      "      yield put(delete${2:PascalCase}Success(response));",
      "    }",
      "  } catch (e) {",
      "    yield put(delete${2:PascalCase}Failure(e));",
      "  }",
      "}",
      "export default function * defaultSaga() {",
      "  return yield all([",
      "    fetch${2:PascalCase}sSaga(),",
      "    fetch${2:PascalCase}Saga(),",
      "    create${2:PascalCase}Saga(),",
      "    update${2:PascalCase}Saga(),",
      "    delete${2:PascalCase}Saga(),",
      "  ]);",
      "}",
      ""
    ],
    "description": "Generates Saga's for CRUD operations"
  },
  "Generates APIs ": {
    "prefix": "strt_apis_crud",
    "body": [
      "import { buildUrl } from './utils';",
      "",
      "export function fetch${1:PascalCase}s() {",
      "  const url = buildUrl(`/${2:lowercase}s`);",
      "  return fetch(url, {",
      "    method: 'GET',",
      "    headers: new Headers({ Accept: 'application/json', 'Content-Type': 'application/json' }),",
      "    mode: 'cors',",
      "    credentials: 'include',",
      "  })",
      "    .then((response) => {",
      "      if (response.status === 200) {",
      "        return response.json();",
      "      }",
      "      if (response.status === 401) {",
      "        const e = new Error();",
      "        e.code = 401;",
      "        throw e;",
      "      }",
      "      return {};",
      "    })",
      "    ;",
      "}",
      "export function fetch${1:PascalCase}(${2:lowercase}Id) {",
      "  const url = buildUrl(`/${2:lowercase}s/${${2:lowercase}Id}`);",
      "  return fetch(url, {",
      "    method: 'GET',",
      "    headers: new Headers({ Accept: 'application/json', 'Content-Type': 'application/json' }),",
      "    mode: 'cors',",
      "    credentials: 'include',",
      "  })",
      "    .then((response) => {",
      "      if (response.status === 200) {",
      "        return response.json();",
      "      }",
      "      if (response.status === 401) {",
      "        const e = new Error();",
      "        e.code = 401;",
      "        throw e;",
      "      }",
      "      return {};",
      "    })",
      "    ;",
      "}",
      "export function create${1:PascalCase}(${2:lowercase}) {",
      "  const url = buildUrl('/${2:lowercase}');",
      "  return fetch(url, {",
      "    method: 'POST',",
      "    headers: new Headers({ Accept: 'application/json', 'Content-Type': 'application/json' }),",
      "    mode: 'cors',",
      "    credentials: 'include',",
      "    body: JSON.stringify(${2:lowercase})",
      "  })",
      "    .then((response) => {",
      "      if (response.status === 200) {",
      "        return response.json();",
      "      }",
      "      if (response.status === 401) {",
      "        const e = new Error();",
      "        e.code = 401;",
      "        throw e;",
      "      }",
      "      return {};",
      "    })",
      "    ;",
      "}",
      "export function update${1:PascalCase}(${2:lowercase}) {",
      "  const url = buildUrl(`/${2:lowercase}s/${${2:lowercase}.id}`);",
      "  return fetch(url, {",
      "    method: 'PUT',",
      "    headers: new Headers({ Accept: 'application/json', 'Content-Type': 'application/json' }),",
      "    mode: 'cors',",
      "    credentials: 'include',",
      "    body: JSON.stringify(${2:lowercase})",
      "  })",
      "    .then((response) => {",
      "      if (response.status === 200) {",
      "        return response.json();",
      "      }",
      "      if (response.status === 401) {",
      "        const e = new Error();",
      "        e.code = 401;",
      "        throw e;",
      "      }",
      "      return {};",
      "    })",
      "    ;",
      "}",
      "export function delete${1:PascalCase}(${2:lowercase}Id) {",
      "  const url = buildUrl(`/${2:lowercase}s/${${2:lowercase}Id}`);",
      "  return fetch(url, {",
      "    method: 'DELETE',",
      "    headers: new Headers({ Accept: 'application/json', 'Content-Type': 'application/json' }),",
      "    mode: 'cors',",
      "    credentials: 'include',",
      "  })",
      "    .then((response) => {",
      "      if (response.status === 200) {",
      "        return response.json();",
      "      }",
      "      if (response.status === 401) {",
      "        const e = new Error();",
      "        e.code = 401;",
      "        throw e;",
      "      }",
      "      return {};",
      "    })",
      "    ;",
      "}",
      ""
    ],
    "description": "Generates APIs "
  },
  "Generates Selectors": {
    "prefix": "strt_selectors_crud",
    "body": [
      "import { createSelector, createStructuredSelector } from 'reselect';",
      "",
      "/**",
      " * Direct selector to the ${2:camelCase}s state domain",
      " */",
      "export const select${1:PascalCase}sDomain = (state) => state.get('${2:camelCase}s');",
      "",
      "/**",
      " * Sub Domain Selectors",
      " */",
      "export const select${1:PascalCase}ListDomain = createSelector(",
      "  select${1:PascalCase}sDomain,",
      "  (${2:camelCase}s) => ${2:camelCase}s.get('${2:camelCase}List')",
      ");",
      "export const selectNew${1:PascalCase}Domain = createSelector(",
      "  select${1:PascalCase}sDomain,",
      "  (${2:camelCase}s) => ${2:camelCase}s.get('new${1:PascalCase}')",
      ");",
      "export const selectDeleted${1:PascalCase}Domain = createSelector(",
      "  select${1:PascalCase}sDomain,",
      "  (${2:camelCase}s) => ${2:camelCase}s.get('deleted${1:PascalCase}')",
      ");",
      "export const selectActive${1:PascalCase}Domain = createSelector(",
      "  select${1:PascalCase}sDomain,",
      "  (${2:camelCase}s) => ${2:camelCase}s.get('active${1:PascalCase}')",
      ");",
      "",
      "/**",
      " * Specific Sub Domain Selectors",
      " */",
      "export const select${1:PascalCase}ListLoading = createSelector(",
      "  select${1:PascalCase}ListDomain,",
      "  (${2:camelCase}List) => ${2:camelCase}List.get('loading')",
      ");",
      "",
      "export const select${1:PascalCase}ListError = createSelector(",
      "  select${1:PascalCase}ListDomain,",
      "  (${2:camelCase}List) => ${2:camelCase}List.get('error')",
      ");",
      "",
      "export const select${1:PascalCase}List${1:PascalCase}s = createSelector(",
      "  select${1:PascalCase}ListDomain,",
      "  (${2:camelCase}List) => ${2:camelCase}List.get('${2:camelCase}s')",
      ");",
      "",
      "export const select${1:PascalCase}ListObject = () => createStructuredSelector({",
      "  loading: select${1:PascalCase}ListLoading,",
      "  error: select${1:PascalCase}ListError,",
      "  ${2:camelCase}s: select${1:PascalCase}List${1:PascalCase}s,",
      "});",
      "",
      "",
      "export const selectNew${1:PascalCase}Loading = createSelector(",
      "  selectNew${1:PascalCase}Domain,",
      "  (new${1:PascalCase}) => new${1:PascalCase}.get('loading')",
      ");",
      "",
      "export const selectNew${1:PascalCase}Error = createSelector(",
      "  selectNew${1:PascalCase}Domain,",
      "  (new${1:PascalCase}) => new${1:PascalCase}.get('error')",
      ");",
      "",
      "export const selectNew${1:PascalCase}${1:PascalCase} = createSelector(",
      "  selectNew${1:PascalCase}Domain,",
      "  (new${1:PascalCase}) => new${1:PascalCase}.get('${2:camelCase}')",
      ");",
      "",
      "export const selectNew${1:PascalCase} = () => createStructuredSelector({",
      "  loading: selectNew${1:PascalCase}Loading,",
      "  error: selectNew${1:PascalCase}Error,",
      "  ${2:camelCase}: selectNew${1:PascalCase}${1:PascalCase},",
      "});",
      "",
      "export const selectActive${1:PascalCase}Loading = createSelector(",
      "  selectActive${1:PascalCase}Domain,",
      "  (active${1:PascalCase}) => active${1:PascalCase}.get('loading')",
      ");",
      "",
      "export const selectActive${1:PascalCase}Error = createSelector(",
      "  selectActive${1:PascalCase}Domain,",
      "  (active${1:PascalCase}) => active${1:PascalCase}.get('error')",
      ");",
      "",
      "export const selectActive${1:PascalCase}${1:PascalCase} = createSelector(",
      "  selectActive${1:PascalCase}Domain,",
      "  (active${1:PascalCase}) => active${1:PascalCase}.get('${2:camelCase}')",
      ");",
      "",
      "export const selectActive${1:PascalCase} = () => createStructuredSelector({",
      "  loading: selectActive${1:PascalCase}Loading,",
      "  error: selectActive${1:PascalCase}Error,",
      "  ${2:camelCase}: selectActive${1:PascalCase}${1:PascalCase},",
      "});",
      "",
      "export const selectDeleted${1:PascalCase}Loading = createSelector(",
      "  selectDeleted${1:PascalCase}Domain,",
      "  (deleted${1:PascalCase}) => deleted${1:PascalCase}.get('loading')",
      ");",
      "",
      "export const selectDeleted${1:PascalCase}Error = createSelector(",
      "  selectDeleted${1:PascalCase}Domain,",
      "  (deleted${1:PascalCase}) => deleted${1:PascalCase}.get('error')",
      ");",
      "",
      "export const selectDeleted${1:PascalCase}${1:PascalCase} = createSelector(",
      "  selectDeleted${1:PascalCase}Domain,",
      "  (deleted${1:PascalCase}) => deleted${1:PascalCase}.get('${2:camelCase}')",
      ");",
      "",
      "export const selectDeleted${1:PascalCase} = () => createStructuredSelector({",
      "  loading: selectDeleted${1:PascalCase}Loading,",
      "  error: selectDeleted${1:PascalCase}Error,",
      "  ${2:camelCase}: selectDeleted${1:PascalCase}${1:PascalCase},",
      "});",
      "",
      "// export default () => createSelector(",
      "//   select${1:PascalCase}sDomain,",
      "//   (substate) => substate.toJS()",
      "// );",
      ""
    ],
    "description": "Generates Selectors"
  }
}